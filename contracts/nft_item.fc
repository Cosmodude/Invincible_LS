#include "imports/stdlib.fc";
#include "imports/nft_op_codes.fc";
int workchain() asm "0 PUSHINT";
int equal_slices (slice a, slice b) asm "SDEQ";

() force_chain(slice addr) impure {
  (int wc, _) = parse_std_addr(addr);
  throw_unless(333, wc == workchain());
}

int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON

;;
;;  Storage
;;
;;  uint64 index
;;  MsgAddressInt collection_address
;;  MsgAddressInt owner_address
;;  MsgAddressInt nexton_address
;;  cell content
;;          {
;;              uint 8 
;;              dict<uint, cell>
;;          }
;;
;;

(int, int, slice, slice, slice, cell) load_data() {
    slice ds = get_data().begin_parse();
    var (index, collection_address) = (ds~load_uint(64), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
      return (-1, index, collection_address, ds~load_msg_addr(), ds~load_msg_addr(), ds~load_ref());
    } else {  
      return (0, index, collection_address, null(), null(), null()); ;; nft not initialized yet
    }
}

() store_data(int index, slice collection_address, slice owner_address, slice nexton_address, cell content) impure {
    set_data(
        begin_cell()
            .store_uint(index, 64)
            .store_slice(collection_address)
            .store_slice(owner_address)
            .store_slice(nexton_address)
            .store_ref(content)
            .end_cell()
    );
}

() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000
    .store_slice(to_address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op, 32)
    .store_uint(query_id, 64);

  send_raw_message(msg.end_cell(), send_mode);
}

() transfer_ownership(int my_balance, int index, slice collection_address, slice owner_address, cell content, slice sender_address, int query_id, slice in_msg_body, int fwd_fees, slice nexton_address) impure inline {
    throw_unless(401, equal_slices(sender_address, owner_address));

    slice new_owner_address = in_msg_body~load_msg_addr();
    if (equal_slices(new_owner_address, nexton_address)){
        slice contS = content.begin_parse();
        int leverage = contS~load_uint(8);
        int principal = contS~load_coins();
        int lockPeriod = contS~load_uint(256);
        throw_unless(900,lockPeriod == 100);
        int lockEnd = contS~load_uint(256);
        throw_unless(901, now() >= lockEnd);
        ;; for dictionary
        {- throw_unless(900, contS~load_uint(8) == 0);
        cell dictCell = contS~load_dict();
        ;;throw_unless(901, contS.slice_empty?() );
        throw_if(902, dictCell.dict_empty?() == -1);
        (slice name, int success) = dictCell.udict_get?(256, string_hash("name"));  ;; need to change to lockPeriod later
        throw_unless(903, success == -1); ;; check that result found
        ;;(int bits, int refs) = name.slice_bits_refs();
        ;;throw_unless(904, bits == 0);  ;; strange
        ;;throw_unless(905, refs == 1);
        ;; problems were here
        slice nameS = name~load_ref().begin_parse();
        throw_if(999, nameS.slice_empty?() == -1);
        ;;(int nameBits, int nameRefs) = nameS.slice_bits_refs();
        ;;throw_if(997, nameBits == 0);
        ;;throw_unless(998, nameRefs == 0);
        nameS~load_uint(8);
        throw_unless(1000, string_hash(nameS) == "Item name"H);
        -}
    }

    force_chain(new_owner_address);
    slice response_destination = in_msg_body~load_msg_addr();
    in_msg_body~load_int(1); ;; this nft don't use custom_payload
    int forward_amount = in_msg_body~load_coins();
    throw_unless(708, slice_bits(in_msg_body) >= 1);

    int rest_amount = my_balance - min_tons_for_storage();
    if (forward_amount) {
      rest_amount -= (forward_amount + fwd_fees);
    }

    int need_response = response_destination.preload_uint(2) != 0; ;; if NOT addr_none: 00
    if (need_response) {
      rest_amount -= fwd_fees;
    }

    throw_unless(402, rest_amount >= 0); ;; base nft spends fixed amount of gas, will not check for response

    if (forward_amount) {
      send_msg(new_owner_address, forward_amount, op::ownership_assigned(), query_id, begin_cell().store_slice(owner_address).store_slice(in_msg_body), 1);  ;; paying fees, revert on errors
    }

    if (need_response) {
      force_chain(response_destination);
      send_msg(response_destination, rest_amount, op::excesses(), query_id, null(), 1); ;; paying fees, revert on errors
    }

    store_data(index, collection_address, new_owner_address, nexton_address, content);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs


    (int init?, int index, slice collection_address, slice owner_address, slice nexton_address, cell content) = load_data();
    ;; need to build a conent dictionary here 
    if (~ init?) {
      throw_unless(405, equal_slices(collection_address, sender_address));
      cell raw_content = in_msg_body~load_ref();
      slice rcs = raw_content.begin_parse();

      cell name = rcs~load_ref();
      slice value = begin_cell().store_ref(name).end_cell().begin_parse();
      cell content_dict = new_dict();
      content_dict~udict_set(256, string_hash("name"), value);
      cell desc = rcs~load_ref();
      value = begin_cell().store_ref(desc).end_cell().begin_parse();
      content_dict~udict_set(256, string_hash("description"), value);
      cell image = rcs~load_ref();
      value = begin_cell().store_ref(image).end_cell().begin_parse();
      content_dict~udict_set(256, string_hash("image"), value);
      int principal = rcs~load_coins();
      value = begin_cell()
              .store_ref(
                  begin_cell()
                  .store_coins(principal)
                  .end_cell())
              .end_cell()
              .begin_parse();
      content_dict~udict_set(256, string_hash("principal"), value);
      int leverageRatio = rcs~load_uint(8);
      value = begin_cell()
              .store_ref(
                  begin_cell()
                  .store_uint(leverageRatio, 8)
                  .end_cell())
              .end_cell()
              .begin_parse();
      content_dict~udict_set(256, string_hash("leverage"), value);
      int lockPeriod = rcs~load_uint(256);
      value = begin_cell()
              .store_ref(
                  begin_cell()
                  .store_uint(lockPeriod, 256)
                  .end_cell())
              .end_cell()
              .begin_parse();
      content_dict~udict_set(256, string_hash("lockPeriod"), value);
      int lockEnd = rcs~load_uint(256);
      value = begin_cell()
              .store_ref(
                  begin_cell()
                  .store_uint(lockEnd, 256)
                  .end_cell())
              .end_cell()
              .begin_parse();
      content_dict~udict_set(256, string_hash("lockEnd"), value);


      throw_if(801, content_dict.dict_empty?());
      cell content = begin_cell()
          .store_uint(0,8)
          .store_dict(content_dict)
          .end_cell();
      store_data(index, collection_address, in_msg_body~load_msg_addr(), in_msg_body~load_msg_addr(), content);  ;; body is crafted in Nexton contract
      return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer()) {
      transfer_ownership(my_balance, index, collection_address, owner_address, content, sender_address, query_id, in_msg_body, fwd_fee, nexton_address);
      return ();
    }
    if (op == op::get_static_data()) {
      send_msg(sender_address, 0, op::report_static_data(), query_id, begin_cell().store_uint(index, 256).store_slice(collection_address), 64);  ;; carry all the remaining value of the inbound message
      return ();
    }
    throw(0xffffff);
}

;;
;;  GET Methods
;;

(int, int, slice, slice, slice, cell) get_nft_data() method_id {
  (int init?, int index, slice collection_address, slice owner_address, slice nexton_address, cell content) = load_data();
  return (init?, index, collection_address, owner_address, nexton_address, content);
}